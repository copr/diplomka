import sys
import numpy as np
import numpy.random as dist
import matplotlib.pyplot as plt
from scipy.stats import norm
import scipy.stats as st
from scipy.stats import multivariate_normal as nd_norm

#TODO: jak pocitat stationary
#SUGESTION: asi bude nej, kdyz b, sig, breaks bude v jednom listu treba,
# ale kazdy bude jeste zvlast list nebo tuple

def likelihood(xs, ys, b, sig, breaks):
    ''' 
    likelihood funkce pro linearni regresi s ruznym poctem zlomu
    xs - vektor nezavislych promennych
    ys - vektor zavislych promenych
    sig - rozptyl
    breaks - body zlomu mezi prokladanymy primkami
    '''
    lik = 1
    n = len(xs)
    for i in range(n):
        x = xs[i]
        y = ys[i]
        # moc se mi to nelibi, mozna pres list comprehnsiony?
        if len(breaks) == 0:
            bracket = y - (x*b[0] + b[1])
        if x > breaks[len(breaks)-1] :
            # bud je x vetsi nez posledni zlomovy bod
            bracket = y - (x*b[2*len(breaks)] + b[2*len(breaks)+1])
        else:
            # a nebo je mensi nez nejaky break
            for i in range(len(breaks)):
                if x < breaks[i]:
                    # b1 a b0 jsou za sebou v beckach
                    bracket = y - (x*b[2*i] + b[2*i+1])
                    break
        lik *= sig**(-1/2)*np.exp(-bracket**2/(2*sig))
    return lik

class rjmcmc:
    def __init__(self):
        print("setup")
        self.xs = [1,2,3]
        self.ys = [2,3,4]

    def stationary(x):
        return likelihood(xs, ys, x[0], x[1], x[2])*prior_b(x[0])*prior_sig(x[1])*prior_breaks(x[2])

    def sampler(x):
        return nd_norm(x, np.eye(len(x))*0.5).rvs()

    def sampler_probability(x, y):
        return nd_norm(x, np.eye(len(x))*0.5).pdf(y)

    def sample():
        n = 10000
        samples = [init_sample]
        previous_sample = init_sample
        for i in range(n):
            GENERATE_NEW_BREAK = 0
            REMOVE_BREAK = 0
            SAMPLE = 1
            u = st.unifrom.rvs()
            if u < GENERATE_NEW_BREAK:
                print('generuju novy break')
            elif u > GENERATE_NEW_BREAK and u < REMOVE_BREAK:
                print('odstranuju break')
            elif u > REMOVE_BREAK and u < SAMPLE:
                u2_bono = st.uniform.pdf()
                new_proposal = self.sampler(previous_sample)
                nominator = self.stationary(new_proposal)*self.sampler_probability(
                    previous_sample, new_proposal)
                denominator = self.stationary(previous_sample)*self.sampler_probability(
                    new_proposal, previous_sample)
                if u2_bono < nominator/denominator:
                    samples.append(new_proposal)
                    previous_sample = new_proposal
                else:
                    samples.append(previous_sample)
        return samples
