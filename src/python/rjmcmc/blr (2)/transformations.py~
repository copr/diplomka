import theano.tensor as T
import theano
import numpy as np

x = T.vector('x')

h0 = x[0]
h1 = x[1]
h2 = x[2]
h3 = x[1] + (x[3]-x[1])*x[5]
h4 = x[2] + (x[4]-x[2])*x[5] + x[6]
h5 = x[3]
h6 = x[4]

# h0 = x[0]
# h1 = x[1]
# h2 = x[2] - x[6]
# h3 = x[1] + (x[3]-x[1])*x[5]
# h4 = x[2] + (x[4]-x[2])*x[5] + x[6]
# h5 = x[3]
# h6 = x[4] - x[6]

h = T.as_tensor_variable([h0, h1, h2, h3, h4, h5, h6])

hh = theano.function([x], h)

hj = theano.gradient.jacobian(h, x)

h_jacobian = theano.function([x], hj)

y = T.vector('y')
g0 = y[0]
g1 = y[1]
g2 = y[2]
g3 = y[5]
g4 = y[6]
g5 = (y[3] - y[1])/(y[5] - y[1])
g6 = y[4] - y[2] - (y[6] - y[2])*(y[3] - y[1])/(y[5] - y[1])

# g0 = 0 #y[0]
# g1 = 0 #y[1]
# g2 = 0 #y[2] + (y[4] - y[2] - (y[6] - y[2])*(y[3] - y[1])/(y[5] - y[1]))
# g3 = 0 #y[5]
# g4 = 0 #y[6] + (y[4] - y[2] - (y[6] - y[2])*(y[3] - y[1])/(y[5] - y[1]))
# g5 = #(y[3] - y[1])/(y[5] - y[1])
# g6 =  y[4] - y[2] - (y[6] - y[2])*(y[3] - y[1])/(y[5] - y[1])

# (y[2] - y[4] + (y[2] - y[6])*(y[3] - y[1])/(y[5] - y[1]))/((y[3] - y[1])/(y[5] - y[1]) - 2)

g = T.as_tensor_variable([g0, g1, g2, g3, g4, g5, g6])

gg = theano.function([y], g)

gj = theano.gradient.jacobian(g, y)

g_jacobian = theano.function([y], gj)

